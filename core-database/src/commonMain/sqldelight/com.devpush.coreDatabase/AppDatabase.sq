-- Enhanced game table
CREATE TABLE game(
    id INTEGER NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    image TEXT NOT NULL,
    rating REAL NOT NULL DEFAULT 0.0,
    release_date TEXT
);

-- Platform table
CREATE TABLE platform(
    id INTEGER NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    slug TEXT NOT NULL UNIQUE
);

-- Genre table
CREATE TABLE genre(
    id INTEGER NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    slug TEXT NOT NULL UNIQUE
);

-- Game-Platform relationship
CREATE TABLE game_platform(
    game_id INTEGER NOT NULL,
    platform_id INTEGER NOT NULL,
    PRIMARY KEY (game_id, platform_id),
    FOREIGN KEY (game_id) REFERENCES game(id) ON DELETE CASCADE,
    FOREIGN KEY (platform_id) REFERENCES platform(id) ON DELETE CASCADE
);

-- Game-Genre relationship
CREATE TABLE game_genre(
    game_id INTEGER NOT NULL,
    genre_id INTEGER NOT NULL,
    PRIMARY KEY (game_id, genre_id),
    FOREIGN KEY (game_id) REFERENCES game(id) ON DELETE CASCADE,
    FOREIGN KEY (genre_id) REFERENCES genre(id) ON DELETE CASCADE
);

-- Game operations
upsert:
INSERT OR REPLACE INTO game(id, name, image, rating, release_date) VALUES(?, ?, ?, ?, ?);

getAllGames:
SELECT * FROM game;

delete:
DELETE FROM game WHERE id=?;

-- Platform operations
upsertPlatform:
INSERT OR REPLACE INTO platform(id, name, slug) VALUES(?, ?, ?);

getAllPlatforms:
SELECT * FROM platform;

-- Genre operations
upsertGenre:
INSERT OR REPLACE INTO genre(id, name, slug) VALUES(?, ?, ?);

getAllGenres:
SELECT * FROM genre;

-- Game-Platform relationship operations
insertGamePlatform:
INSERT OR REPLACE INTO game_platform(game_id, platform_id) VALUES(?, ?);

deleteGamePlatforms:
DELETE FROM game_platform WHERE game_id = ?;

getGamePlatforms:
SELECT p.* FROM platform p
INNER JOIN game_platform gp ON p.id = gp.platform_id
WHERE gp.game_id = ?;

-- Game-Genre relationship operations
insertGameGenre:
INSERT OR REPLACE INTO game_genre(game_id, genre_id) VALUES(?, ?);

deleteGameGenres:
DELETE FROM game_genre WHERE game_id = ?;

getGameGenres:
SELECT g.* FROM genre g
INNER JOIN game_genre gg ON g.id = gg.genre_id
WHERE gg.game_id = ?;

-- Filtered game queries
getGamesByPlatform:
SELECT DISTINCT g.* FROM game g
INNER JOIN game_platform gp ON g.id = gp.game_id
WHERE gp.platform_id IN ?;

getGamesByGenre:
SELECT DISTINCT g.* FROM game g
INNER JOIN game_genre gg ON g.id = gg.game_id
WHERE gg.genre_id IN ?;

getGamesByRating:
SELECT * FROM game WHERE rating >= ?;

searchGamesByName:
SELECT * FROM game WHERE name LIKE '%' || ? || '%';

-- Performance optimization: Add indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_game_name ON game(name);
CREATE INDEX IF NOT EXISTS idx_game_rating ON game(rating);
CREATE INDEX IF NOT EXISTS idx_game_release_date ON game(release_date);
CREATE INDEX IF NOT EXISTS idx_platform_name ON platform(name);
CREATE INDEX IF NOT EXISTS idx_genre_name ON genre(name);
CREATE INDEX IF NOT EXISTS idx_game_platform_game_id ON game_platform(game_id);
CREATE INDEX IF NOT EXISTS idx_game_platform_platform_id ON game_platform(platform_id);
CREATE INDEX IF NOT EXISTS idx_game_genre_game_id ON game_genre(game_id);
CREATE INDEX IF NOT EXISTS idx_game_genre_genre_id ON game_genre(genre_id);

-- Optimized queries for better performance
getGamesByPlatformOptimized:
SELECT DISTINCT g.* FROM game g
INNER JOIN game_platform gp ON g.id = gp.game_id
WHERE gp.platform_id IN ?
ORDER BY g.rating DESC, g.name ASC;

getGamesByGenreOptimized:
SELECT DISTINCT g.* FROM game g
INNER JOIN game_genre gg ON g.id = gg.game_id
WHERE gg.genre_id IN ?
ORDER BY g.rating DESC, g.name ASC;

getGamesByRatingOptimized:
SELECT * FROM game 
WHERE rating >= ? 
ORDER BY rating DESC, name ASC;

searchGamesByNameOptimized:
SELECT * FROM game 
WHERE name LIKE '%' || ? || '%' 
ORDER BY 
  CASE WHEN name LIKE ? || '%' THEN 1 ELSE 2 END,
  rating DESC, 
  name ASC;

-- Combined filter queries for better performance
getGamesWithFilters:
SELECT DISTINCT g.* FROM game g
LEFT JOIN game_platform gp ON g.id = gp.game_id
LEFT JOIN game_genre gg ON g.id = gg.game_id
WHERE 
  (? = '' OR g.name LIKE '%' || ? || '%') AND
  (? = 0 OR g.rating >= ?) AND
  (? = 0 OR gp.platform_id IN ?) AND
  (? = 0 OR gg.genre_id IN ?)
ORDER BY g.rating DESC, g.name ASC
LIMIT ? OFFSET ?;

-- Game Collections Schema
-- Collections table
CREATE TABLE game_collection(
    id TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    type TEXT NOT NULL,
    description TEXT,
    created_at INTEGER NOT NULL,
    updated_at INTEGER NOT NULL
);

-- Collection-Game relationship
CREATE TABLE collection_game(
    collection_id TEXT NOT NULL,
    game_id INTEGER NOT NULL,
    added_at INTEGER NOT NULL,
    PRIMARY KEY (collection_id, game_id),
    FOREIGN KEY (collection_id) REFERENCES game_collection(id) ON DELETE CASCADE,
    FOREIGN KEY (game_id) REFERENCES game(id) ON DELETE CASCADE
);

-- Indexes for performance optimization
CREATE INDEX IF NOT EXISTS idx_collection_type ON game_collection(type);
CREATE INDEX IF NOT EXISTS idx_collection_updated_at ON game_collection(updated_at);
CREATE INDEX IF NOT EXISTS idx_collection_name ON game_collection(name);
CREATE INDEX IF NOT EXISTS idx_collection_game_collection_id ON collection_game(collection_id);
CREATE INDEX IF NOT EXISTS idx_collection_game_game_id ON collection_game(game_id);
CREATE INDEX IF NOT EXISTS idx_collection_game_added_at ON collection_game(added_at);

-- Collection operations
createCollection:
INSERT INTO game_collection(id, name, type, description, created_at, updated_at) 
VALUES(?, ?, ?, ?, ?, ?);

getAllCollections:
SELECT * FROM game_collection ORDER BY 
  CASE type 
    WHEN 'WISHLIST' THEN 1 
    WHEN 'CURRENTLY_PLAYING' THEN 2 
    WHEN 'COMPLETED' THEN 3 
    ELSE 4 
  END, 
  name ASC;

getCollectionById:
SELECT * FROM game_collection WHERE id = ?;

getCollectionsByType:
SELECT * FROM game_collection WHERE type = ? ORDER BY name ASC;

updateCollection:
UPDATE game_collection 
SET name = ?, description = ?, updated_at = ? 
WHERE id = ?;

deleteCollection:
DELETE FROM game_collection WHERE id = ?;

getCollectionWithGameCount:
SELECT c.id, c.name, c.type, c.description, c.created_at, c.updated_at, COUNT(cg.game_id) AS gameCount 
FROM game_collection c 
LEFT JOIN collection_game cg ON c.id = cg.collection_id 
GROUP BY c.id, c.name, c.type, c.description, c.created_at, c.updated_at 
ORDER BY 
  CASE c.type 
    WHEN 'WISHLIST' THEN 1 
    WHEN 'CURRENTLY_PLAYING' THEN 2 
    WHEN 'COMPLETED' THEN 3 
    ELSE 4 
  END, 
  c.name ASC;

-- Collection-Game relationship operations
addGameToCollection:
INSERT OR REPLACE INTO collection_game(collection_id, game_id, added_at) 
VALUES(?, ?, ?);

removeGameFromCollection:
DELETE FROM collection_game 
WHERE collection_id = ? AND game_id = ?;

getGamesInCollection:
SELECT g.*, cg.added_at 
FROM game g 
INNER JOIN collection_game cg ON g.id = cg.game_id 
WHERE cg.collection_id = ? 
ORDER BY cg.added_at DESC;

getCollectionsForGame:
SELECT c.* 
FROM game_collection c 
INNER JOIN collection_game cg ON c.id = cg.collection_id 
WHERE cg.game_id = ?;

checkGameInCollection:
SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END AS gameExists 
FROM collection_game 
WHERE collection_id = ? AND game_id = ?;

getGameCountInCollection:
SELECT COUNT(*) AS gameCount 
FROM collection_game 
WHERE collection_id = ?;

-- Batch operations for performance
removeAllGamesFromCollection:
DELETE FROM collection_game WHERE collection_id = ?;

getCollectionsByGameId:
SELECT c.id, c.name, c.type 
FROM game_collection c 
INNER JOIN collection_game cg ON c.id = cg.collection_id 
WHERE cg.game_id = ?;

-- Advanced queries for collection management
getRecentlyAddedGames:
SELECT g.id, g.name, g.image, g.rating, g.release_date, cg.added_at, c.name AS collectionName 
FROM game g 
INNER JOIN collection_game cg ON g.id = cg.game_id 
INNER JOIN game_collection c ON cg.collection_id = c.id 
ORDER BY cg.added_at DESC 
LIMIT ?;

getCollectionStats:
SELECT 
  c.id,
  c.name,
  c.type,
  COUNT(cg.game_id) AS totalGames,
  MAX(cg.added_at) AS lastUpdated
FROM game_collection c 
LEFT JOIN collection_game cg ON c.id = cg.collection_id 
GROUP BY c.id, c.name, c.type;

-- Search collections by name
searchCollectionsByName:
SELECT * FROM game_collection 
WHERE name LIKE '%' || ? || '%' 
ORDER BY name ASC;

-- User Ratings and Reviews Schema
-- User game ratings table
CREATE TABLE user_game_rating(
    game_id INTEGER NOT NULL PRIMARY KEY,
    rating INTEGER NOT NULL CHECK(rating >= 1 AND rating <= 5),
    created_at INTEGER NOT NULL,
    updated_at INTEGER NOT NULL,
    FOREIGN KEY (game_id) REFERENCES game(id) ON DELETE CASCADE
);

-- Performance index for user ratings
CREATE INDEX IF NOT EXISTS idx_user_game_rating_game_id ON user_game_rating(game_id);

-- User rating operations
insertUserRating:
INSERT OR REPLACE INTO user_game_rating(game_id, rating, created_at, updated_at) 
VALUES(?, ?, ?, ?);

getUserRating:
SELECT * FROM user_game_rating WHERE game_id = ?;

updateUserRating:
UPDATE user_game_rating 
SET rating = ?, updated_at = ? 
WHERE game_id = ?;

deleteUserRating:
DELETE FROM user_game_rating WHERE game_id = ?;

getAllUserRatings:
SELECT * FROM user_game_rating ORDER BY updated_at DESC;

getUserRatingCount:
SELECT COUNT(*) AS ratingCount FROM user_game_rating;

getUserAverageRating:
SELECT AVG(CAST(rating AS REAL)) AS averageRating FROM user_game_rating;

getUserRatingDistribution:
SELECT rating, COUNT(*) AS count 
FROM user_game_rating 
GROUP BY rating 
ORDER BY rating ASC;

-- User game reviews table
CREATE TABLE user_game_review(
    game_id INTEGER NOT NULL PRIMARY KEY,
    review_text TEXT NOT NULL CHECK(length(review_text) <= 1000 AND length(review_text) > 0),
    created_at INTEGER NOT NULL,
    updated_at INTEGER NOT NULL,
    FOREIGN KEY (game_id) REFERENCES game(id) ON DELETE CASCADE
);

-- Performance index for user reviews
CREATE INDEX IF NOT EXISTS idx_user_game_review_game_id ON user_game_review(game_id);

-- User review operations
insertUserReview:
INSERT OR REPLACE INTO user_game_review(game_id, review_text, created_at, updated_at) 
VALUES(?, ?, ?, ?);

getUserReview:
SELECT * FROM user_game_review WHERE game_id = ?;

updateUserReview:
UPDATE user_game_review 
SET review_text = ?, updated_at = ? 
WHERE game_id = ?;

deleteUserReview:
DELETE FROM user_game_review WHERE game_id = ?;

getAllUserReviews:
SELECT * FROM user_game_review ORDER BY updated_at DESC;

getUserReviewCount:
SELECT COUNT(*) AS reviewCount FROM user_game_review;

getRecentUserReviews:
SELECT ugr.*, g.name AS game_name, g.image AS game_image 
FROM user_game_review ugr 
INNER JOIN game g ON ugr.game_id = g.id 
ORDER BY ugr.updated_at DESC 
LIMIT ?;

-- Combined queries for games with user data
getGameWithUserData:
SELECT 
    g.*,
    ugr.rating AS user_rating,
    ugr.created_at AS rating_created_at,
    ugr.updated_at AS rating_updated_at,
    ugrev.review_text AS user_review,
    ugrev.created_at AS review_created_at,
    ugrev.updated_at AS review_updated_at
FROM game g
LEFT JOIN user_game_rating ugr ON g.id = ugr.game_id
LEFT JOIN user_game_review ugrev ON g.id = ugrev.game_id
WHERE g.id = ?;

getGamesWithUserData:
SELECT 
    g.*,
    ugr.rating AS user_rating,
    ugr.created_at AS rating_created_at,
    ugr.updated_at AS rating_updated_at,
    ugrev.review_text AS user_review,
    ugrev.created_at AS review_created_at,
    ugrev.updated_at AS review_updated_at
FROM game g
LEFT JOIN user_game_rating ugr ON g.id = ugr.game_id
LEFT JOIN user_game_review ugrev ON g.id = ugrev.game_id
WHERE g.id IN ?;

-- Statistics queries
getUserRatingStats:
SELECT 
    (SELECT COUNT(*) FROM user_game_rating) AS total_rated_games,
    (SELECT COUNT(*) FROM user_game_review) AS total_reviews,
    (SELECT AVG(CAST(rating AS REAL)) FROM user_game_rating) AS average_rating;

-- Recent activity queries
getRecentUserActivity:
SELECT 
    'rating' AS activity_type,
    g.id AS game_id,
    g.name AS game_name,
    g.image AS game_image,
    ugr.rating AS rating,
    NULL AS review_text,
    ugr.updated_at AS activity_date
FROM user_game_rating ugr
INNER JOIN game g ON ugr.game_id = g.id
UNION ALL
SELECT 
    'review' AS activity_type,
    g.id AS game_id,
    g.name AS game_name,
    g.image AS game_image,
    NULL AS rating,
    ugrev.review_text AS review_text,
    ugrev.updated_at AS activity_date
FROM user_game_review ugrev
INNER JOIN game g ON ugrev.game_id = g.id
ORDER BY activity_date DESC
LIMIT ?;

